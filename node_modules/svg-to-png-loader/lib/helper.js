"use strict";

exports.__esModule = true;

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  prepareSizes: function prepareSizes(config) {
    return [config.height ? [{
      height: config.height,
      width: config.width || config.height
    }] : (config.sizes || []).map(function (val) {
      return val.trim();
    }).map(function (val) {
      return [val, /([0-9]+)(x([0-9]+))?/.exec(val)];
    }).map(function (val) {
      return val[1];
    }).map(function (val) {
      return {
        height: val[1],
        width: val[3] || val[1]
      };
    })].map(function (val) {
      if (val.length === 0) {
        throw new Error("");
      }
      return val;
    })[0];
  },
  prepareName: function prepareName(template, templateData) {
    return Object.keys(templateData).reduce(function (ac, cu) {
      return ac.replace(new RegExp("\\[" + cu + "\\]", "g"), (templateData[cu] + "").replace(/\.svg$/i, ""));
    }, template || "[name]-[height]x[width].png");
  },
  convert: function convert(config, helper, child_process, os, dryRun) {
    return Promise.all(helper.prepareSizes(config).map(function (size) {
      return new Promise(function (resolve, reject) {

        var name = helper.prepareName(config.name, {
          name: _path2.default.basename(config.resourcePath),
          height: size.height,
          width: size.width
        });

        var exportPng = _path2.default.join(config.outputPath, name);

        var inkscapeConfig = config.inkscape || {};

        var inkscapeBin = inkscapeConfig.bin || (os === "darwin" ? "/Applications/Inkscape.app/Contents/Resources/bin/inkscape" : "inkscape");

        var inkscapeCmd = `
        ${inkscapeBin}
          --export-png=${exportPng}
          --export-height=${size.height}
          --export-width=${size.width}
          ${config.resourcePath}
      `.replace(/\n/g, " ").replace(/[ ]+/g, " ").trim();
        if (dryRun) {
          resolve();
        } else {
          child_process.exec(inkscapeCmd, function (err, stdout, stderr) {
            var log = function log(line, stream) {
              if (line.length > 0) {
                stream(line);
              }
            };
            log(stdout, console.log.bind(console));
            log(stderr, console.error.bind(console));
            if (err) {
              reject(err);
            } else {
              resolve();
            }
          });
        }
      });
    }));
  }
};